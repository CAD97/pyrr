package pyrr:libm;

world imports {
    import f32;
    import f64;
}

world exports {
    export f32;
    export f64;
}

interface f32 {
    acos: func(x: float32) -> float32;
    acosh: func(x: float32) -> float32;
    asin: func(x: float32) -> float32;
    atan: func(x: float32) -> float32;
    atan2: func(y: float32, x: float32) -> float32;
    atanh: func(x: float32) -> float32;
    cbrt: func(x: float32) -> float32;
    ceil: func(x: float32) -> float32;
    copysign: func(x: float32, y: float32) -> float32;
    cos: func(x: float32) -> float32;
    cosh: func(x: float32) -> float32;
    erf: func(x: float32) -> float32;
    erfc: func(x: float32) -> float32;
    exp: func(x: float32) -> float32;
    exp2: func(x: float32) -> float32;
    exp10: func(x: float32) -> float32;
    expm1: func(x: float32) -> float32;
    fabs: func(x: float32) -> float32;
    fdim: func(x: float32, y: float32) -> float32;
    floor: func(x: float32) -> float32;
    fma: func(x: float32, y: float32, z: float32) -> float32;
    fmax: func(x: float32, y: float32) -> float32;
    fmin: func(x: float32, y: float32) -> float32;
    fmod: func(x: float32, y: float32) -> float32;
    frexp: func(x: float32) -> tuple<float32, s32>;
    hypot: func(x: float32, y: float32) -> float32;
    ilogb: func(x: float32) -> s32;
    j0: func(x: float32) -> float32;
    j1: func(x: float32) -> float32;
    jn: func(n: s32, x: float32) -> float32;
    ldexp: func(x: float32, n: s32) -> float32;
    lgamma: func(x: float32) -> float32;
    lgamma-r: func(x: float32) -> tuple<float32, s32>;
    log: func(x: float32) -> float32;
    log1p: func(x: float32) -> float32;
    log2: func(x: float32) -> float32;
    log10: func(x: float32) -> float32;
    modf: func(x: float32) -> tuple<float32, float32>;
    nextafter: func(x: float32, y: float32) -> float32;
    pow: func(x: float32, y: float32) -> float32;
    remainder: func(x: float32, y: float32) -> float32;
    remquo: func(x: float32, y: float32) -> tuple<float32, s32>;
    rint: func(x: float32) -> float32;
    round: func(x: float32) -> float32;
    scalbn: func(x: float32, n: s32) -> float32;
    sin: func(x: float32) -> float32;
    sincos: func(x: float32) -> tuple<float32, float32>;
    sinh: func(x: float32) -> float32;
    sqrt: func(x: float32) -> float32;
    tan: func(x: float32) -> float32;
    tanh: func(x: float32) -> float32;
    tgamma: func(x: float32) -> float32;
    trunc: func(x: float32) -> float32;
    y0: func(x: float32) -> float32;
    y1: func(x: float32) -> float32;
    yn: func(n: s32, x: float32) -> float32;
}

interface f64 {
    acos: func(x: float64) -> float64;
    acosh: func(x: float64) -> float64;
    asin: func(x: float64) -> float64;
    atan: func(x: float64) -> float64;
    atan2: func(y: float64, x: float64) -> float64;
    atanh: func(x: float64) -> float64;
    cbrt: func(x: float64) -> float64;
    ceil: func(x: float64) -> float64;
    copysign: func(x: float64, y: float64) -> float64;
    cos: func(x: float64) -> float64;
    cosh: func(x: float64) -> float64;
    erf: func(x: float64) -> float64;
    erfc: func(x: float64) -> float64;
    exp: func(x: float64) -> float64;
    exp2: func(x: float64) -> float64;
    exp10: func(x: float64) -> float64;
    expm1: func(x: float64) -> float64;
    fabs: func(x: float64) -> float64;
    fdim: func(x: float64, y: float64) -> float64;
    floor: func(x: float64) -> float64;
    fma: func(x: float64, y: float64, z: float64) -> float64;
    fmax: func(x: float64, y: float64) -> float64;
    fmin: func(x: float64, y: float64) -> float64;
    fmod: func(x: float64, y: float64) -> float64;
    frexp: func(x: float64) -> tuple<float64, s32>;
    hypot: func(x: float64, y: float64) -> float64;
    ilogb: func(x: float64) -> s32;
    j0: func(x: float64) -> float64;
    j1: func(x: float64) -> float64;
    jn: func(n: s32, x: float64) -> float64;
    ldexp: func(x: float64, n: s32) -> float64;
    lgamma: func(x: float64) -> float64;
    lgamma-r: func(x: float64) -> tuple<float64, s32>;
    log: func(x: float64) -> float64;
    log1p: func(x: float64) -> float64;
    log2: func(x: float64) -> float64;
    log10: func(x: float64) -> float64;
    modf: func(x: float64) -> tuple<float64, float64>;
    nextafter: func(x: float64, y: float64) -> float64;
    pow: func(x: float64, y: float64) -> float64;
    remainder: func(x: float64, y: float64) -> float64;
    remquo: func(x: float64, y: float64) -> tuple<float64, s32>;
    rint: func(x: float64) -> float64;
    round: func(x: float64) -> float64;
    scalbn: func(x: float64, n: s32) -> float64;
    sin: func(x: float64) -> float64;
    sincos: func(x: float64) -> tuple<float64, float64>;
    sinh: func(x: float64) -> float64;
    sqrt: func(x: float64) -> float64;
    tan: func(x: float64) -> float64;
    tanh: func(x: float64) -> float64;
    tgamma: func(x: float64) -> float64;
    trunc: func(x: float64) -> float64;
    y0: func(x: float64) -> float64;
    y1: func(x: float64) -> float64;
    yn: func(n: s32, x: float64) -> float64;
}

